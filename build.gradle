import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.filters.ReplaceTokens

def getVersionFromGit = {
	->
	def standard = new ByteArrayOutputStream()
	def error = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = standard
		errorOutput = error
		ignoreExitValue = true
	}

	if (error.toString().isEmpty())
		return standard.toString().trim()
	else
		return 'SNAPSHOT'
}

println("##teamcity[buildNumber '" + getVersionFromGit() + "']");

apply plugin: 'java'
allprojects {
	version = getVersionFromGit()

	apply plugin: 'java'
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	compileJava.options.encoding = 'UTF-8'
	sourceSets {
		main {
			java {
				srcDirs = [
					'src/main/java/api',
					'src/main/java/impl'
				]
			}
		}
	}

	repositories { mavenCentral() }
	dependencies {
		testCompile 'junit:junit:4.11'
	}

	processResources {
		filesMatching("**/*.properties") {
			filter ReplaceTokens, tokens: [
				'version': getVersion(),
				'year'   : Calendar.getInstance().get(Calendar.YEAR).toString()
			]
		}
	}
}

dependencies {
	compile project(':cl')
	compile project(':gui')
	runtime subprojects

	runtime 'org.slf4j:slf4j-jdk14:1.7.6'
}


buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
		classpath 'de.undercouch:gradle-download-task:0.5'
	}
}
apply plugin: 'shadow'
shadow {
	outputFile = new File("${project.buildDir}/distributions/", "bazi.jar")
}
jar {
	manifest {
		attributes "Main-Class": "de.uni_augsburg.bazi.gui.BAZI"
	}
}


apply plugin: 'distribution'
apply plugin: 'download-task'
distributions {
	main {
		baseName = 'bazi'
		contents {
			filesMatching("**/*.txt") {
				filter ReplaceTokens, tokens: [
					'version': getVersion(),
					'year'   : Calendar.getInstance().get(Calendar.YEAR).toString()
				]
			}
			from 'build/distributions/bazi.jar'
			from 'build/data.zip'
		}

	}
}

task downloadDataZip(type: Download) {
	src 'http://www.math.uni-augsburg.de/stochastik/bazitest/data.zip'
	dest buildDir
}

shadowJar.dependsOn subprojects.jar
distTar.dependsOn shadowJar, downloadDataZip
distZip.dependsOn shadowJar, downloadDataZip
installDist.dependsOn shadowJar, downloadDataZip


javadoc {
	source subprojects.collect { project -> project.sourceSets.main.allJava }
	classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
	destinationDir = new File(buildDir, 'docs/api')
	options.links 'http://docs.oracle.com/javase/8/docs/api/'
}
